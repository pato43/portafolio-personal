import streamlit as st
import pandas as pd
import numpy as np
import time
import random

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Portafolio de Consultor√≠a Interactivo",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Inyecci√≥n de CSS personalizado para una experiencia visual mejorada
custom_css = """
<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Arial', sans-serif;
    }
    .sidebar .sidebar-content {
        background-color: #343a40;
        color: #ffffff;
    }
    .stButton button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }
    .stButton button:hover {
        background-color: #0056b3;
    }
    h1, h2, h3, h4 {
        color: #343a40;
    }
    .expander-header {
        font-size: 1.1rem;
        font-weight: bold;
    }
    .title {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .description {
        font-size: 1rem;
        line-height: 1.5;
    }
    /* Estilos para mejorar la visibilidad de los sliders y botones */
    .css-1aumxhk {
        background-color: #e9ecef;
        border-radius: 4px;
    }
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# T√≠tulo y descripci√≥n principal
st.title("Portafolio de Consultor√≠a AleteIA")
st.markdown(
    "Explora una amplia gama de proyectos en √°reas como transformaci√≥n digital, ciencia de datos, desarrollo web y estrategias financieras. "
    "Utiliza el men√∫ lateral para navegar, filtrar y descubrir cada proyecto de forma interactiva."
)

# Placeholder para el contenido principal (ser√° actualizado din√°micamente en las partes siguientes)
main_placeholder = st.empty()

# Definici√≥n del portafolio con muchos proyectos (cada proyecto usar√° la misma imagen simulada)
portfolio = {
    "Transformaci√≥n Digital y Automatizaci√≥n": [
        {
            "title": "üìå Automatizaci√≥n de Procesos en Holtmont M√©xico",
            "description": "Desarrollo de un sistema de automatizaci√≥n en **Google Sheets** con **Apps Script** para gestionar la distribuci√≥n de tareas, seguimiento de tiempos y consolidaci√≥n de datos en Holtmont M√©xico. Se integraron scripts personalizados para reportes autom√°ticos en **Google Drive**, notificaciones v√≠a **Gmail API** y validaciones din√°micas en hojas de c√°lculo.\n\nüîó **Beneficio:** Reducci√≥n del **40%** en tiempos administrativos, mejora en trazabilidad de datos y eliminaci√≥n de errores en reportes.",
            "image": "/home/nichi/Im√°genes/holtmont.png",
            "link": "https://example.com/holtmont"
        },
        {
            "title": "üí≥ Sistema de Punto de Venta Inteligente para Carbis",
            "description": "Desarrollo de un **POS interactivo** en **Google Sheets y Apps Script** para **Carbis**, con interfaz intuitiva, actualizaci√≥n autom√°tica de stock y panel de ventas en tiempo real. Se integraron botones din√°micos, validaciones y c√°lculos automatizados de costos.\n\nüîó **Beneficio:** **30% menos errores de cobro**, reducci√≥n de **60% en el tiempo de facturaci√≥n** y mejor gesti√≥n de inventario.",
            "image": "/home/nichi/Im√°genes/carbis.png",
            "link": "https://example.com/carbis"
        },
        {
            "title": "üè¢ Digitalizaci√≥n de Tr√°mites en Tenancingo",
            "description": "Desarrollo de un **portal de tr√°mites en l√≠nea** con asistencia por **WhatsApp API**. Se implement√≥ una base de datos en **Google Firebase**, formularios interactivos y automatizaci√≥n de respuestas.\n\nüîó **Beneficio:** **80% menos tiempo de espera**, reducci√≥n de costos administrativos y acceso digital sin desplazamientos.",
            "image": "/home/nichi/Im√°genes/tramites_tenancingo.png",
            "link": "https://example.com/tenancingo"
        }
    ],
    "Ciencia de Datos y An√°lisis de Informaci√≥n": [
        {
            "title": "üìä An√°lisis Financiero con APIs de Banxico",
            "description": "Desarrollo de un sistema en **Python y SQL** que extrae datos de **Banxico API** y otras fuentes financieras, con dashboards en **Streamlit** y gr√°ficos din√°micos en **Looker Studio**.\n\nüîó **Beneficio:** An√°lisis financiero en tiempo real, optimizaci√≥n de inversiones y predicciones basadas en datos hist√≥ricos.",
            "image": "/home/nichi/Im√°genes/banxico.png",
            "link": "https://example.com/banxico"
        },
        {
            "title": "üîÆ Predicci√≥n de Ventas con Series de Tiempo",
            "description": "Modelo de predicci√≥n usando **Taipy y Prophet** con carga de datos en **Google Sheets** y an√°lisis de tendencias en **Power BI**.\n\nüîó **Beneficio:** **25% menos p√©rdidas por sobreinventario**, optimizaci√≥n en compras y mejora en planeaci√≥n de producci√≥n.",
            "image": "/home/nichi/Im√°genes/prediccion_ventas.png",
            "link": "https://example.com/prediccion"
        }
    ],
    "Desarrollo Web y Digitalizaci√≥n Empresarial": [
        {
            "title": "üõí Marketplace Digital para Comerciantes de Tenancingo",
            "description": "Desarrollo de una plataforma de e-commerce multivendedor en **Django y React**, con pasarelas de pago en **Stripe** y herramientas de gesti√≥n de inventario.\n\nüîó **Beneficio:** **35% m√°s ventas**, digitalizaci√≥n de comercios informales y acceso a clientes externos.",
            "image": "/home/nichi/Im√°genes/marketplace_tenancingo.png",
            "link": "https://example.com/marketplace"
        },
        {
            "title": "üíº Portal de Servicios Empresariales",
            "description": "Plataforma en **Flask y Bootstrap** para conectar profesionales con clientes, con filtros avanzados y sistema de reservas.\n\nüîó **Beneficio:** Optimizaci√≥n de contrataci√≥n y automatizaci√≥n de citas.",
            "image": "/home/nichi/Im√°genes/portal_servicios.png",
            "link": "https://example.com/portal_servicios"
        }
    ],
    "Educaci√≥n y Capacitaci√≥n Tecnol√≥gica": [
        {
            "title": "üéì Curso de Data Analytics con Python y SQL",
            "description": "Curso integral con **SQL, Python, Looker Studio y Streamlit**, incluyendo ejercicios pr√°cticos en **Google Colab** y dashboards en **Looker**.\n\nüîó **Beneficio:** Formaci√≥n de **100+ alumnos**, generaci√≥n de reportes automatizados y an√°lisis en tiempo real.",
            "image": "/home/nichi/Im√°genes/curso_data_analytics.png",
            "link": "https://example.com/curso_data_analytics"
        },
        {
            "title": "üë®‚Äçüíª Bootcamp TECISTEM - Certificaci√≥n en Desarrollo Web",
            "description": "Bootcamp de **Microsoft y Mozilla** con tecnolog√≠as **HTML, CSS, JavaScript, React y Django**.\n\nüîó **Beneficio:** Desarrollo de portafolios digitales y certificaciones verificables.",
            "image": "/home/nichi/Im√°genes/tecistem.png",
            "link": "https://example.com/bootcamp_tecistem"
        }
    ],
    "Estrategia de Negocio y Modelos Innovadores": [
        {
            "title": "üè¶ SOFIPO Digital para Locatarios",
            "description": "Modelo financiero con herramientas de an√°lisis crediticio en **Streamlit**, integrando educaci√≥n financiera y reportes de riesgo.\n\nüîó **Beneficio:** Inclusi√≥n financiera de peque√±os empresarios y acceso a cr√©ditos accesibles.",
            "image": "/home/nichi/Im√°genes/sofipo.png",
            "link": "https://example.com/sofipo"
        },
        {
            "title": "üìà Optimizaci√≥n Financiera en PYMEs",
            "description": "Consultor√≠a para la **automatizaci√≥n de reportes financieros** con **Google Sheets, Python y Power BI**, optimizando costos y tiempos de an√°lisis.\n\nüîó **Beneficio:** **20% menos costos administrativos** y toma de decisiones basada en datos.",
            "image": "/home/nichi/Im√°genes/optimizacion_financiera.png",
            "link": "https://example.com/optimizacion"
        }
    ]
}

# Men√∫ lateral con filtros y opciones interactivas para una navegaci√≥n √≥ptima
st.sidebar.title("Navegaci√≥n y Filtros")
selected_category = st.sidebar.selectbox("Selecciona una Categor√≠a", list(portfolio.keys()))
search_text = st.sidebar.text_input("Buscar proyecto por t√≠tulo:")

# Widgets adicionales en el sidebar para personalizar la experiencia
st.sidebar.markdown("### Opciones Adicionales")
project_slider = st.sidebar.slider("N√∫mero de proyectos a mostrar:", min_value=1, max_value=25, value=10, step=1)
refresh_time = st.sidebar.checkbox("Actualizar hora en tiempo real", value=True)
if refresh_time:
    current_time = time.strftime("%H:%M:%S")
    st.sidebar.markdown(f"**Hora Actual:** {current_time}")

# Consejo del d√≠a din√°mico
st.sidebar.markdown("### Consejo del D√≠a")
tips = [
    "Actualiza tu portafolio regularmente.",
    "La innovaci√≥n es la clave del √©xito.",
    "Mant√©n tus proyectos bien documentados.",
    "Siempre busca nuevas tendencias tecnol√≥gicas."
]
st.sidebar.write(random.choice(tips))

# Informaci√≥n adicional y enlace de ayuda en el sidebar
st.sidebar.markdown("---")
st.sidebar.info("Utiliza los filtros y opciones para explorar nuestros proyectos. ¬°Disfruta la experiencia interactiva!")

# Bot√≥n para refrescar algunos widgets del sidebar
if st.sidebar.button("Refrescar Widgets"):
    st.sidebar.success(f"Widgets actualizados a las {time.strftime('%H:%M:%S')}")

# Nota: En esta parte a√∫n no se muestra la imagen, pero en las partes siguientes se utilizar√°:
# st.image(..., use_container_width=True) para mostrar las im√°genes de cada proyecto

# Confirmaci√≥n de carga de la Parte 1
st.markdown("### [Parte 1 de 3 cargada]")
# Parte 2: Visualizaci√≥n din√°mica de proyectos y elementos interactivos

st.markdown("## Visualizaci√≥n de Proyectos")
st.markdown("Descubre cada proyecto de la categor√≠a seleccionada a trav√©s de una interfaz interactiva. Ajusta el filtro y el slider para ver la cantidad de proyectos que desees.")

# Filtrar proyectos seg√∫n la categor√≠a seleccionada y el texto de b√∫squeda
selected_projects = portfolio[selected_category]
if search_text:
    selected_projects = [proj for proj in selected_projects if search_text.lower() in proj["title"].lower()]

if not selected_projects:
    st.warning("No se encontraron proyectos que coincidan con la b√∫squeda.")
else:
    max_projects = len(selected_projects)
    num_projects = st.slider("N√∫mero de proyectos a mostrar:", min_value=1, max_value=max_projects, value=min(project_slider, max_projects), step=1)
    
    st.markdown("---")
    # Iterar sobre los proyectos filtrados y mostrarlos en expanders din√°micos
    for i, project in enumerate(selected_projects[:num_projects]):
        with st.expander(f"{i+1}. {project['title']}", expanded=False):
            col_img, col_details = st.columns([1, 2])
            with col_img:
                st.image(project["image"], caption=project["title"], use_container_width=True)
            with col_details:
                st.subheader(project["title"])
                st.write(project["description"])
                st.markdown(f"[Ver m√°s detalles]({project['link']})")
                if st.button(f"Explorar {project['title']}", key=f"explore_{i}"):
                    st.info(f"Redirigiendo a {project['title']} - [Link Simulado]({project['link']})")
            
            st.markdown("---")
            
            # Widgets interactivos adicionales dentro de cada proyecto
            st.markdown("### Califica este proyecto:")
            rating = st.radio("¬øQu√© tan interesante es este proyecto?",
                              options=["Excelente", "Bueno", "Regular", "Malo"], key=f"rating_{i}")
            st.write(f"Calificaci√≥n seleccionada: **{rating}**")
            
            st.markdown("### Progreso del Proyecto:")
            progress_val = random.randint(0, 100)
            st.progress(progress_val)
            
            st.markdown("### Comentarios:")
            comment = st.text_area("Deja tu comentario aqu√≠:", key=f"comment_{i}")
            if st.button("Enviar comentario", key=f"send_comment_{i}"):
                if comment.strip():
                    st.success("¬°Gracias por tu comentario!")
                else:
                    st.error("Por favor, escribe un comentario antes de enviarlo.")
            st.markdown("---")
    
    # Secci√≥n adicional: an√°lisis interactivo y visualizaci√≥n de datos
    st.markdown("## An√°lisis Interactivo de Proyectos")
    st.markdown("Visualiza datos resumidos de los proyectos de la categor√≠a seleccionada.")
    
    # Crear un DataFrame simulando an√°lisis: longitud de los t√≠tulos de los proyectos
    project_titles = [proj["title"] for proj in selected_projects]
    df_projects = pd.DataFrame({
        "Proyecto": project_titles,
        "Longitud del T√≠tulo": [len(title) for title in project_titles],
        "√çndice": list(range(1, len(project_titles) + 1))
    })
    
    st.dataframe(df_projects)
    
    # Selecci√≥n del tipo de gr√°fico a visualizar
    chart_type = st.selectbox("Selecciona el tipo de gr√°fico:", ["L√≠nea", "Barras"], key="chart_type")
    
    st.markdown("### Gr√°fico: Longitud del T√≠tulo de Proyectos")
    if chart_type == "L√≠nea":
        st.line_chart(df_projects.set_index("√çndice")["Longitud del T√≠tulo"])
    else:
        st.bar_chart(df_projects.set_index("√çndice")["Longitud del T√≠tulo"])
    
    st.markdown("---")
    
    # Secci√≥n para ver detalles espec√≠ficos de un proyecto seleccionado
    st.markdown("## Detalle Espec√≠fico del Proyecto")
    project_options = {proj["title"]: proj for proj in selected_projects}
    selected_project_title = st.selectbox("Selecciona un proyecto para ver m√°s detalles:", list(project_options.keys()), key="detail_select")
    selected_project = project_options[selected_project_title]
    
    st.subheader(f"Detalle del Proyecto: {selected_project['title']}")
    st.image(selected_project["image"], caption=selected_project["title"], width=300)
    st.write(selected_project["description"])
    st.markdown(f"[Acceder a la p√°gina del proyecto]({selected_project['link']})")
    
    # Widget interactivo: contador de likes para el proyecto seleccionado
    st.markdown("### Likes del Proyecto")
    if "like_count" not in st.session_state:
        st.session_state["like_count"] = {}
    if selected_project_title not in st.session_state["like_count"]:
        st.session_state["like_count"][selected_project_title] = 0
    if st.button("¬°Me gusta!", key="like_btn"):
        st.session_state["like_count"][selected_project_title] += 1
    st.write(f"Total de likes: {st.session_state['like_count'][selected_project_title]}")
    
    st.markdown("---")
    
    # Encuesta interactiva sobre preferencias en proyectos
    st.markdown("## Encuesta R√°pida")
    survey_choice = st.radio("¬øCu√°l es la caracter√≠stica m√°s importante en un proyecto?", 
                             options=["Innovaci√≥n", "Eficiencia", "Dise√±o", "Impacto"], key="survey")
    st.write(f"Has seleccionado: **{survey_choice}** como la caracter√≠stica m√°s importante.")
    
    st.markdown("---")
    
    # Simulaci√≥n de una animaci√≥n: mensajes de actualizaci√≥n progresiva
    st.markdown("### Actualizaci√≥n en Progreso")
    anim_placeholder = st.empty()
    for j in range(3):
        anim_placeholder.info(f"Actualizando detalles... ({j+1}/3)")
        time.sleep(0.5)
    anim_placeholder.success("¬°Actualizaci√≥n completada!")

st.markdown("### [Parte 2 de 3 cargada]")
# Parte 3: Funcionalidades adicionales, secci√≥n de contacto, descargas y estad√≠sticas avanzadas

st.markdown("## Funcionalidades Adicionales y Secci√≥n de Contacto")
st.markdown("Explora secciones adicionales que enriquecen la experiencia del portafolio, incluyendo informaci√≥n sobre m√≠, formas de contacto, descarga del portafolio y an√°lisis avanzado de datos.")

# Selector para elegir entre diferentes secciones adicionales
additional_section = st.radio("Selecciona una secci√≥n adicional:", 
                                ["Acerca de", "Contacto", "Descargar Portafolio", "Estad√≠sticas Avanzadas"],
                                key="additional_section")

if additional_section == "Acerca de":
    st.markdown("### Acerca de M√≠")
    st.write("Soy un consultor con amplia experiencia en transformaci√≥n digital, ciencia de datos, desarrollo web y estrategias financieras. Mi misi√≥n es impulsar la innovaci√≥n en cada proyecto y ofrecer soluciones que marquen la diferencia.")
    st.image("/home/nichi/Im√°genes/tecoo.png", caption="Mi Imagen Profesional", use_container_width=True)
    st.write("Con un enfoque en resultados y una pasi√≥n por la tecnolog√≠a, me dedico a ayudar a empresas a adaptarse y prosperar en un entorno digital en constante cambio.")
    # Testimonio din√°mico simulado
    testimonial = random.choice([
        "¬°Excelente profesional, muy innovador!",
        "Su enfoque es realmente transformador.",
        "Gran capacidad para resolver problemas complejos.",
        "Su visi√≥n digital ha revolucionado nuestra operaci√≥n."
    ])
    st.markdown(f"**Testimonio Destacado:** *{testimonial}*")

elif additional_section == "Contacto":
    st.markdown("### Cont√°ctame")
    st.write("Si deseas comunicarte, por favor completa el siguiente formulario y me pondr√© en contacto contigo a la brevedad.")
    with st.form(key="contact_form"):
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("Nombre:")
        with col2:
            email = st.text_input("Correo Electr√≥nico:")
        message = st.text_area("Mensaje:")
        submit_contact = st.form_submit_button("Enviar Mensaje")
        if submit_contact:
            if name.strip() and email.strip() and message.strip():
                st.success("¬°Gracias por tu mensaje! Me pondr√© en contacto contigo muy pronto.")
            else:
                st.error("Por favor, completa todos los campos antes de enviar.")

elif additional_section == "Descargar Portafolio":
    st.markdown("### Descargar Portafolio")
    st.write("Descarga una versi√≥n en PDF de mi portafolio completo para revisarlo sin conexi√≥n.")
    # Simulaci√≥n del contenido PDF del portafolio
    portfolio_pdf_content = (
        "Este documento PDF contiene una recopilaci√≥n detallada de proyectos de transformaci√≥n digital, "
        "an√°lisis de datos, desarrollo web y estrategias de negocio. "
        "Incluye descripciones, resultados y testimonios que reflejan mi experiencia en consultor√≠a."
    )
    st.download_button("Descargar Portafolio en PDF", 
                       data=portfolio_pdf_content, 
                       file_name="portafolio_consultoria.pdf", 
                       mime="application/pdf")

elif additional_section == "Estad√≠sticas Avanzadas":
    st.markdown("### Estad√≠sticas Avanzadas")
    st.write("Revisa estad√≠sticas simuladas de los proyectos del portafolio para obtener una visi√≥n global de la actividad y tendencias.")
    # Crear un DataFrame simulando estad√≠sticas avanzadas
    advanced_stats = pd.DataFrame({
        "Categor√≠a": list(portfolio.keys()),
        "Proyectos": [len(portfolio[cat]) for cat in portfolio.keys()],
        "Impacto (Simulado)": np.random.randint(50, 100, size=len(portfolio))
    })
    st.dataframe(advanced_stats)
    st.markdown("### Gr√°fico: N√∫mero de Proyectos por Categor√≠a")
    # Usar Altair para gr√°ficos avanzados
    import altair as alt
    chart = alt.Chart(advanced_stats).mark_bar().encode(
        x=alt.X("Categor√≠a:N", title="Categor√≠a"),
        y=alt.Y("Proyectos:Q", title="N√∫mero de Proyectos"),
        color=alt.Color("Categor√≠a:N")
    ).properties(width=600, height=400)
    st.altair_chart(chart, use_container_width=True)

# Secci√≥n de Redes Sociales y Conexi√≥n
st.markdown("---")
st.markdown("### Con√©ctate Conmigo")
st.write("Encu√©ntrame en mis redes sociales para conocer m√°s sobre mis proyectos y actividades:")
st.markdown("[LinkedIn](https://www.linkedin.com) | [GitHub](https://github.com) | [Twitter](https://twitter.com)")

# Informaci√≥n de la Sesi√≥n y Datos del Portafolio
st.markdown("---")
total_projects = sum(len(proyectos) for proyectos in portfolio.values())
st.write(f"**Total de Proyectos en el Portafolio:** {total_projects}")
st.write("**Fecha y Hora de Acceso:**", time.strftime("%Y-%m-%d %H:%M:%S"))

# Mensaje final con widget interactivo y selecci√≥n aleatoria de despedida
st.markdown("### Mensaje Final")
farewell_options = [
    "¬°Gracias por visitar mi portafolio, hasta la pr√≥xima!",
    "¬°Espero que disfrutes explorando mis proyectos!",
    "¬°Vuelve pronto para m√°s innovaciones!",
    "¬°Que tengas un excelente d√≠a!"
]
selected_farewell = random.choice(farewell_options)
st.write(selected_farewell)

# Widget interactivo adicional: encuesta r√°pida para mejorar la experiencia del usuario
st.markdown("### ¬øC√≥mo calificar√≠as tu experiencia en este portafolio?")
experience_rating = st.slider("Califica de 1 (malo) a 10 (excelente):", min_value=1, max_value=10, value=7, step=1)
st.write(f"Tu calificaci√≥n: **{experience_rating}**")
if experience_rating >= 8:
    st.balloons()

# Informaci√≥n adicional sobre la sesi√≥n y estado de los likes acumulados
st.markdown("### Resumen de la Sesi√≥n")
if "like_count" in st.session_state:
    total_likes = sum(st.session_state["like_count"].values())
else:
    total_likes = 0
st.write(f"**Total de Likes Acumulados en la Sesi√≥n:** {total_likes}")

st.markdown("### [Parte 3 de 3 cargada]")
